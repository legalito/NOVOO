---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Cursor Rules for Coaching App Project

## üîß Contexte du projet

- Application mobile de suivi de musculation et de coaching.
- Architecture front en React Native (Expo) et back-end via Supabase.
- Utilisateurs = clients coach√©s qui suivent un programme et enregistrent leurs s√©ances.

## üìÅ Fichiers √† suivre (tu pourras les @ d√®s qu‚Äôils existent)

- @app/screens/ (toutes les pages visibles par l‚Äôutilisateur)
- @supabase/schema.sql (structure BDD)
- @lib/api/ (requ√™tes vers Supabase)
- @types/ (types TypeScript partag√©s)

## üóÉ Donn√©es importantes en base de donn√©es

- `users`: infos personnelles (taille, poids, date de naissance, etc.).
- `workouts`: s√©ances cr√©√©es.
- `exercises`: exercices disponibles.
- `workout_exercises`: lien s√©ance ‚Üî exercices (avec s√©ries, reps, etc.).
- `progress`: √©volution du poids, muscles, etc.
- `plans`: programmes personnalis√©s.
- `calendar`: s√©ances planifi√©es.
- `subscriptions`: abonnements (gratuit ou premium).

## ‚öôÔ∏è Fonctionnalit√©s principales

### Authentification
- Auth Supabase (email + mdp).
- Cr√©ation / connexion / d√©connexion utilisateur.

### Tableau de bord
- Acc√®s rapide au dernier entra√Ænement, programme et prochaines s√©ances.

### Entra√Ænement
- Cr√©ation de s√©ances (choix des exercices, s√©ries, reps).
- Historique des s√©ances avec visualisation.
- Modification des s√©ances.

### Programme
- Attribution de programmes.
- Suivi de l'avancement (compl√©t√© ou non).

### Suivi & Statistiques
- Courbes de poids, performances, objectifs.
- Statistiques filtr√©es par p√©riode.

### Calendrier
- Visualisation des s√©ances √† venir.
- Planification de futurs entra√Ænements.

### Profil utilisateur
- √âdition du profil.
- Objectifs (prise de masse, perte de poids, maintien...).

## üîÑ R√®gles Cursor sp√©cifiques

- Le front est connect√© √† Supabase avec Supabase JS Client.
- Pr√©f√®re `zod` pour la validation c√¥t√© client.
- Utilise `react-query` ou `swr` pour la gestion des appels (selon ce que tu choisis).
- Les dates sont toujours manipul√©es avec `dayjs`.
- Tous les types sont en TypeScript strict.
- Ne jamais hardcoder les donn√©es d'utilisateur ‚Äî toujours passer par le context utilisateur.

## üí¨ Astuce d‚Äôutilisation

> Si tu veux coder une feature (ex : stats mensuelles), commence par un schema clair de la donn√©e, puis demande une fonction dans `/lib/api/`, enfin branche-la dans `/screens/`.